import streamlit as st
import requests
from PIL import Image
import matplotlib.pyplot as plt
from io import BytesIO
from streamlit_drawable_canvas import st_canvas

# URL –¥–æ –≤–∞—à–µ–≥–æ API
API_URL = "https://classify-flowers.onrender.com/predict/"

# –ò–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤ —Ü–≤–µ—Ç–æ–≤
CLASS_NAMES = {
    "Lilly": "üåº –õ–∏–ª–∏—è",
    "Lotus": "üåº –õ–æ—Ç—É—Å",
    "Orchid": "üåπ –û—Ä—Ö–∏–¥–µ—è",
    "Sunflower": "üåª –ü–æ–¥—Å–æ–ª–Ω—É—Ö",
    "Tulip": "üå∑ –¢—é–ª—å–ø–∞–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤", page_icon="üå∏")

st.title("üå∏ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤")

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞
tab = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
    ["üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "‚úèÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"],
    horizontal=True
)

image = None

if tab == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞",
        type=["jpg", "jpeg", "png"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö JPG, JPEG –∏ PNG"
    )
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")
        st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

elif tab == "‚úèÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
    st.write("–ù–∞—Ä–∏—Å—É–π—Ç–µ —Ü–≤–µ—Ç–æ–∫:")
    canvas_result = st_canvas(
        fill_color="#ffffff",
        stroke_width=15,
        stroke_color="#000000",
        background_color="#ffffff",
        width=300,
        height=300,
        drawing_mode="freedraw",
        key="canvas",
        update_streamlit=True
    )

    if canvas_result.image_data is not None:
        image = Image.fromarray(canvas_result.image_data.astype("uint8")).convert("RGB")
        st.image(image, caption="–í–∞—à —Ä–∏—Å—É–Ω–æ–∫", use_column_width=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if image and st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–∫", type="primary"):
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_resized = image.resize((128, 128))
            buffered = BytesIO()
            img_resized.save(buffered, format="JPEG")
            img_bytes = buffered.getvalue()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
            files = {"file": ("flower.jpg", img_bytes, "image/jpeg")}
            response = requests.post(API_URL, files=files)

            if response.status_code == 200:
                result = response.json()

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                predicted_class = result.get("predicted_class", "unknown")
                human_readable = CLASS_NAMES.get(predicted_class, predicted_class)

                st.success(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {human_readable}")

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                probs = result.get("probabilities", {})
                if probs:
                    st.subheader("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:")

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                    sorted_probs = dict(sorted(probs.items(), key=lambda item: item[1], reverse=True))

                    fig, ax = plt.subplots(figsize=(10, 5))
                    colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0']
                    bars = ax.bar(
                        [CLASS_NAMES.get(k, k) for k in sorted_probs.keys()],
                        sorted_probs.values(),
                        color=colors
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                    for bar in bars:
                        height = bar.get_height()
                        ax.text(bar.get_x() + bar.get_width() / 2., height,
                                f'{height:.2f}',
                                ha='center', va='bottom')

                    ax.set_ylim(0, 1.1)
                    plt.xticks(rotation=45)
                    st.pyplot(fig)

            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
                st.text(response.text)

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
st.markdown("---")
st.markdown("""
**–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:**
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
- –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ API: `flower-classification-api.onrender.com`
""")